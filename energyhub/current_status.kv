#:import Arrow kivy_arrow.arrow.Arrow


#:set non_eco (1, 0.5, 0, 1)
#:set inactive (0.7, 0.7, 0.7, 1)
#:set eco (0, 0.8, 0, 1)
#:set neutral (0, 0, 0, 1)

<EHLabel@Label>
    is_stale: None
    color: non_eco if self.is_stale is None else inactive if self.is_stale else neutral


<PowerLabel@EHLabel>
    val: 0
    unit: 'kW'
    conversion_factor: 1/1000
    unit_label: ('\n' if self.vertical else ' ' ) + f'[size={app.small_size}]{self.unit}[/size]'
    str_val: '%.*f' % (self.dp, self.val*self.conversion_factor)
    text: f'{self.str_val}{self.unit_label}'
    dp: 2
    vertical: False
    markup: True
    halign: 'center'


<PercentLabel@PowerLabel>
    unit: '%'
    conversion_factor: 1
    dp: 0


<Arrow>
    head_angle: 60
    main_color: (0, 0, 0, 1)
    outline_color: (1, 1, 1, 0)
    fletching_radius: 0
    arrow_at_midpoint: True
    shaft_width: cm(0.03)


<PowerArrow@Arrow>
    power: 0
    active_color: neutral
    head_size: app.calculate_arrow_size(self.power)
    main_color: inactive if self.power == 0 else self.active_color


<LabeledArrow@PowerArrow>
    vertical: self.angle not in (0, 180)
    is_stale: None
    RelativeLayout:
        orientation: 'horizontal' if root.vertical else 'vertical'
        pos: (min(root.o_x, root.to_x), min(root.o_y, root.to_y))
        size: (root.parent.width*0.15, root.distance) if root.vertical else (root.distance, root.parent.height*0.05)
        PowerLabel:
            canvas:
                Color:
                    rgba: (0, 0, 0, 0)
                Rectangle:
                    pos: (self.x, self.y)
                    size: (self.width, self.height)
            val: root.power
            pos: (0, 0)
            halign: 'center'
            vertical: root.vertical
            is_stale: root.is_stale


<Battery@Widget>
    level: 0
    color: 0, 0, 0, 1
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            pos: (self.x, self.y)
            size: (self.width, self.height * 0.95 * self.level/100)
        Color:
            rgb: 0, 0, 0
        Line:
            width: 4.
            rectangle: (self.x, self.y, self.width, self.height * .95)
        Line:
            width: 4.
            rectangle: (self.x+self.width*0.4, self.y+self.height*.95, self.width*0.2, self.height * .05)


<CurrentStatus@RelativeLayout>:
    canvas.before:
        Color:
            rgb: 1, 1, 1
        Rectangle:
            size: self.size
    IconButton:
        source: 'energyhub/resources/icons8-reset-48.png'
        text: 'Refresh'
        on_press: app.refresh()
        pos_hint: {'x': 0.86, 'y': 0.02}
        size_hint: (0.08, 0.08)
        allow_stretch: True
    Image:
        source: 'energyhub/resources/Solar_panel_icon.png'
        size_hint: (0.3, 0.1)
        allow_stretch: False
        pos_hint: {'x': 0.5 - ((self.width/self.parent.width) / 2), 'y': 0.88}
    PowerArrow:
        active_color: eco
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.9
        distance: self.parent.height * 0.1
        angle: 270
        power: app.solar_model.solar_production
    PowerLabel:
        val: app.solar_model.solar_production
        is_stale: app.solar_model.stale
        pos_hint: {'y': 0.925, 'x': 0.45}
        size_hint: (0.1, 0.1)
    LabeledArrow:
        is_stale: app.solar_model.stale
        power: app.solar_model.battery_production
        active_color: eco if app.solar_model.solar_production > 0 else non_eco
        o_x: self.parent.width * 0.3
        o_y: self.parent.height * 0.8
        distance: self.parent.width * 0.2
        angle: 0
        reverse_arrow: app.solar_model.battery_state == 'Charging'
    Battery:
        color: app.solar_model.battery_color
        level: app.solar_model.battery_level
        size_hint: (0.122, 0.1)
        pos_hint: {'x': 0.16 - ((self.width/self.parent.width) / 2), 'y': 0.75}
    PercentLabel:
        is_stale: app.solar_model.stale
        val: app.solar_model.battery_level
        pos_hint: {'y': 0.83, 'x': 0.15}
        size_hint: (0.05, 0.1)
    Image:
        source: 'energyhub/resources/pylon256.png'
        size_hint: (0.2, 0.2)
        pos_hint: {'x': 0.75, 'y': 0.7}
    LabeledArrow:
        is_stale: app.solar_model.stale
        power: app.solar_model.grid_power
        reverse_arrow: app.solar_model.grid_exporting
        active_color: eco if app.solar_model.grid_exporting else non_eco
        o_x: self.parent.width * 0.7
        o_y: self.parent.height * 0.8
        distance: self.parent.width * 0.2
        angle: 180
    LabeledArrow:
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.8
        distance: self.parent.height * 0.1
        angle: 270
        power: app.solar_model.load
        is_stale: app.solar_model.stale
    EHLabel:
        is_stale: app.heat_pump_model.stale
        text: str(app.heat_pump_model.outside_temperature) + ' ÂºC'
        size_hint: (0.1, 0.1)
        pos_hint: {'x': 0.65, 'y': 0.6}
        valign: 'middle'
    Image:
        source: 'energyhub/resources/radiator.jpg'
        size_hint: (0.35, 0.35)
        pos_hint: {'x': 0.001, 'y': 0.34}

    PowerArrow:
        active_color: app.solar_model.load_color
        # from House to first branches
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.6
        distance: self.parent.height * 0.1
        angle: 270
        power: app.solar_model.load
    Image:
        source: 'energyhub/resources/shower.png'
        size_hint: (0.2, 0.2)
        pos_hint: {'x': 0.05, 'y': 0.3}
    LabeledArrow:
        # first left branch
        is_stale: app.heat_pump_model.stale
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.width * 0.2
        angle: 180
        power: app.heat_pump_model.heating_power
    Image:
        source: 'energyhub/resources/light-bulb-2-256.png'
        size_hint: (0.2, 0.2)
        pos_hint: {'x': 0.75, 'y': 0.42}
    LabeledArrow:
        # first right branch
        is_stale: app.solar_model.stale
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.width * 0.2
        angle: 0
        power: app.remaining_load
    PowerArrow:
        # from first branches to second branches
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.height * 0.1
        angle: 270
        power: app._bottom_arms_power
    LabeledArrow:
        is_stale: app.heat_pump_model.stale
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.width * 0.2
        angle: 180
        power: app.heat_pump_model.dhw_power
    LabeledArrow:
        is_stale: app.diverter_model.stale
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.width * 0.2
        angle: 0
        power: app.diverter_model.immersion_power
    Image:
        source: 'energyhub/resources/immersion-heater.png'
        size_hint: (0.2, 0.2)
        pos_hint: {'x': 0.75, 'y': 0.3}
    LabeledArrow:
        # to car load
        is_stale: app.diverter_model.stale
        active_color: app.solar_model.load_color
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.height * 0.1
        angle: 270
        power: app.diverter_model.car_charger_power
    Image:
        source: 'energyhub/resources/ipace.jpg'
        size_hint: (0.5, 0.3)
        allow_stretch: False
        pos_hint: {'x': 0.25, 'y': 0.1}
    EHLabel:
        is_stale: app.car_model.stale
        text: app.car_model.charge_label
        pos_hint: {'y': 0.12, 'x': 0.45}
        size_hint: (0.1, 0.05)
