#:kivy 1.0

<Label>
    color: (0, 0, 0, 1)

<PowerLabel@Label>
    val: 0
    unit: 'kW'
    unit_label: ('\n' if self.vertical else ' ' ) + f'[size={app.small_size}]{self.unit}[/size]'
    str_val: '%.*f' % (self.dp, self.val)
    text: f'{self.str_val}{self.unit_label}'
    dp: 2
    vertical: False
    markup: True
    halign: 'center'


<PercentLabel@PowerLabel>
    unit: '%'
    dp: 0

<Arrow>
    head_angle: 60
    main_color: (0, 0, 0, 1)
    outline_color: (1, 1, 1, 0)
    fletching_radius: 0
    arrow_at_midpoint: True

<Battery@Widget>
    canvas:
        Color:
            rgba: app.battery_color
        Rectangle:
            pos: (self.x, self.y)
            size: (self.width, self.height * 0.95 * app.battery_level/100)
        Color:
            rgb: 0, 0, 0
        Line:
            width: 4.
            rectangle: (self.x, self.y, self.width, self.height * .95)
        Line:
            width: 4.
            rectangle: (self.x+self.width*0.4, self.y+self.height*.95, self.width*0.2, self.height * .05)


<CurrentStatus@FloatLayout>:
    canvas.before:
        Color:
            rgb: 1, 1, 1
        Rectangle:
            pos: self.pos
            size: self.size
    IconButton:
        source: 'energyhub/resources/icons8-reset-48.png'
        text: 'Refresh'
        on_press: app.refresh()
        pos_hint: {'x': 0.86, 'y': 0.02}
        size_hint: (0.1, 0.1)
    Image:
        source: 'energyhub/resources/Solar_panel_icon.png'
        size_hint: (0.3, 0.1)
        allow_stretch: False
        pos_hint: {'x': 0.5 - ((self.width/self.parent.width) / 2), 'y': 0.88}
    Arrow:
        main_color: (0, 0, 0, 1) if app.solar_production == 0 else (0, 0.8, 0, 1)
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.9
        distance: self.parent.height * 0.1
        angle: 270
        head_size: app.calculate_arrow_size(app.solar_production)
    PowerLabel:
        val: app.solar_production
        pos_hint: {'y': 0.925, 'x': 0.45}
        size_hint: (0.1, 0.1)
    Arrow:
        o_x: self.parent.width * 0.3
        o_y: self.parent.height * 0.8
        distance: self.parent.width * 0.2
        angle: 0
        head_size: app.calculate_arrow_size(app.battery_production)
        reverse_arrow: app.battery_state == 'Charging'
    PowerLabel:
        val: app.battery_production
        pos_hint: {'y': 0.8, 'x': 0.35}
        size_hint: (0.1, 0.05)
    Battery:
        size_hint: (0.08, 0.1)
        pos_hint: {'x': 0.25 - ((self.width/self.parent.width) / 2), 'y': 0.75}
    PercentLabel:
        val: app.battery_level
        pos_hint: {'y': 0.83, 'x': 0.24}
        size_hint: (0.05, 0.1)
    Image:
        source: 'energyhub/resources/pylon256.png'
        size_hint: (0.2, 0.2)
        allow_stretch: False
        pos_hint: {'x': 0.7, 'y': 0.7}
    Arrow:
        main_color: (0, 0, 0, 1) if app.grid_power == 0 else (1, 0.5, 0, 1)
        o_x: self.parent.width * 0.7
        o_y: self.parent.height * 0.8
        distance: self.parent.width * 0.2
        angle: 180
        head_size: app.calculate_arrow_size(app.grid_power)
    PowerLabel:
        val: app.grid_power
        pos_hint: {'y': 0.8, 'x': 0.6}
        size_hint: (0.05, 0.05)
    Arrow:
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.8
        distance: self.parent.height * 0.1
        angle: 270
        head_size: app.calculate_arrow_size(app.solar_edge_load)
    PowerLabel:
        val: app.solar_edge_load
        pos_hint: {'y': 0.7, 'x': 0.55}
        size_hint: (0.05, 0.1)
        vertical: True

    Arrow:
        # from House to first branches
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.6
        distance: self.parent.height * 0.1
        angle: 270
        head_size: app.calculate_arrow_size(app.solar_edge_load)

    Arrow:
        # first left branch
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.width * 0.2
        angle: 180
#        head_size: app.calculate_arrow_size(app.grid_power)

    Arrow:
        # first right branch
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.width * 0.2
        angle: 0
        head_size: app.calculate_arrow_size(app.remaining_load)
    PowerLabel:
        val: app.remaining_load
        vertical: False
        pos_hint: {'y': 0.5, 'x': 0.6}
        size_hint: (0.05, 0.05)
    # TODO add light bulb icon
    Arrow:
        # from first branches to second branches
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.5
        distance: self.parent.height * 0.1
        angle: 270
        head_size: 0 #app.calculate_arrow_size(app.solar_edge_load)

    Arrow:
#        main_color: (0, 0, 0, 1) if app.grid_power == 0 else (1, 0.5, 0, 1)
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.width * 0.2
        angle: 180
#        head_size: app.calculate_arrow_size(app.grid_power)

    Arrow:

#        main_color: (0, 0, 0, 1) if app.grid_power == 0 else (1, 0.5, 0, 1)
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.width * 0.2
        angle: 0
    PowerLabel:
        val: app.eddi_power
        vertical: False
        pos_hint: {'y': 0.4, 'x': 0.6}
        size_hint: (0.05, 0.05)
    # TODO add immersion icon
    Arrow:
        # to car load
        o_x: self.parent.width * 0.5
        o_y: self.parent.height * 0.4
        distance: self.parent.height * 0.1
        angle: 270
        head_size: app.calculate_arrow_size(app.zappi_power)
    PowerLabel:
        val: app.zappi_power
        vertical: True
        pos_hint: {'y': 0.3, 'x': 0.55}
        size_hint: (0.05, 0.1)
    Image:
        source: 'energyhub/resources/ipace.jpg'
        size_hint: (0.5, 0.3)
        allow_stretch: False
        pos_hint: {'x': 0.25, 'y': 0.1}
    PercentLabel:
        val: app.car_battery_level
        pos_hint: {'y': 0.12, 'x': 0.45}
        size_hint: (0.1, 0.05)


CurrentStatus